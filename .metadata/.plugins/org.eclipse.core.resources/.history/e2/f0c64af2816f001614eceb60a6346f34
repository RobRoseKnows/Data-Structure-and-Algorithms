/*
 * str.c
 *
 *  Created on: Aug 16, 2016
 *      Author: wenjian
 */
#include<stdlib.h>
#include"str.h"

/*converts a byte string to a floating point value,
 * double atof(const char* str);
 * float strtof(const char *restrict str, char **restrict str_end);
 * in the library
 */
double str_atof(const char* str){
	int signal = 1; /*store the signal*/
	if(*str == '-'){/*judge the signal*/
		signal = -1;
		str++;
	}
	double num1 = 0.0;/*number that greater than 0*/
	while((*str != '.')&&(*str != '\0')){/**/
		num1 = num1*10 + (*str-'0');
		str++;
	}
	if(*str == '\0') return signal*num1;/*the string is end, the value is integer*/
	str++;/*else, skip the point '.'*/
	double num2 = 0.0;/*start calc decimal*/
	int power = 10;
	while(*str != '\0'){/*the string end*/
		num2 = num2 + (double)(*str-'0')/power; /*divide power*/
		power = power*10;/*increase the power*/
		str++;
	}

	return signal*(num1+num2);/*return the plus of num1 and num2*/
}

/*converts a byte string to an integer value,
 *int atoi(const char *str );
 *long trtol(const char *str, char **str_end, int base );
 *in the library
 */
int str_atoi(const char* str){
	if(str == NULL) exit(1);
	int signal = 1;/*store the signal*/
	if(*str == '-') {/*judge the signal*/
		signal = -1;
		str++;
	}
	int num = 0; /*start calc value*/
	while(*str != '\0'){
		num = num*10 + (*str-'0');/*multiplex 10 every time*/
		str++;
	}
	return signal*num;
}

/*
 * converts an integer value to a string
 * char* itoa(int value);
 */
void str_itoa(int value, char* str){

	char tmp_str[20]; /*tmp string to store the value*/
	int tmp = value;
	if(value < 0) tmp = -value;/*if the value less than 0, make it to be +*/
	int i = 0;
	while(tmp > 0){
		tmp_str[i++] = (tmp % 10) + '0'; /*plus '0'*/
		tmp = tmp/10;
	}

	if(value < 0) *str++ = '-';
	i--;/*because the while loop i++*/
	while(i>=0)
		*str++ = tmp_str[i--];/*copy tmp string to str, NOTICE, reverse*/

	*str='\0';/*finally end flag '\0'*/
}

/*
 * converts a float to a string
 * char* itof(double value)
 */
//void str_itof(double value, char* str){
//	int integer = (int)value;
//
//}

/*copies one string to another
 * char *strcpy( char *dest, const char *src );
 */
void str_strcpy(char* dest, const char* src){
	register char* d = dest;/*try to allocate the variable in the register beside the cpu*/
	while(*src != '\0')
		*d++ = *src++;
	*d = '\0';
}

/*
 * copies a certain amount of characters from one string to another
 * char *strncpy( char *dest, const char *src, size_t count );
 */
void str_strncpy(char* dest, const char* src, const int length){
	register char* d = dest;
	int i = 0;
	while((i < length)&&(*src != '\0')){
		*d++ = *src++;
		i++;
	}
	*d = '\0';
}

/*
 * concatenates two strings
 * add src to the last of dest, override the '\0'
 * and add '\0' after the cat
 * char *strcat( char *dest, const char *src );
 */
void str_strcat(char* dest, const char* src){
	register char* d = dest;
	while(*d != '\0') d++;/*loop until the last*/
	while(*src != '\0')
		*d++ = *src++;
	*d = '\0';/*NOTICE, add the end character*/
}

/*
 * concatenates a certain amount of characters of two strings
 * char *strncat( char *dest, const char *src, size_t count );
 */
void str_strncat(char* dest, const char* src, int length){
	register char* d = dest;
	while(*d != '\0') d++;
	int i = 0;
	while((i < length)&&(*src != '\0')){/*length as the end*/
		*d++ = *src++;
		i++;
	}
	*d = '\0';
}

/*
 * returns the length of a given string, NOT include '\0'
 * size_t strlen( const char *str );
 */
int str_strlen(const char* str){
	int i = 0; /*count*/
	while(*str != '\0') {
		i++;/*count until '\0'*/
		str++;
	}
	return i;
}

/*
 * compares two strings, return 0 if equal, else return str1-str2
 * int strcmp( const char *lhs, const char *rhs );
 */
int str_strcmp(const char* str1, const char* str2){
	while((*str1 != '\0')&&(*str2 != '\0')){/*str1 and str2 are the end, out of loop*/
		if(*str1 == *str2) {
			str1++;
			str2++;
		}
		else break;
	}
	if((*str1 == '\0')&&(*str2 == '\0')) return 0;/*equal*/
	else if(*str1-*str2>0) return 1;
	return -1;
}

/*
 * compares a certain amount of characters of two strings
 *int strncmp( const char *lhs, const char *rhs, size_t count );
 */
int str_strncmp(const char* str1, const char* str2, int length){
	int i = 0;
	while((i < length)&&(*str1 != '\0')&&(*str2 != '\0')){/*length, '\0' as the end character*/
		if(*str1 == *str2){
			str1++;
			str2++;
			i++;
		}
		else break;
	}
	if(i == length) return 0;/*i==length, bingo*/
	else if(*str1-*str2 > 0) return 1;/*else means i<length*/
	else if(*str1-*str2 < 0) return -1;
	return 0; /*this means str1 and str2 are both end, before end, they are equal*/
}

/*
 * finds the next token in a byte string
 * char *strtok( char *str, const char *delim );
 */
//char* str_strtok(char* str, const char* delim){}

/*
 * fills a buffer with a character
 * void *memset( void *dest, int ch, size_t count );
 */
void str_memset(void* dest, int ch, int length){
	register char* d = dest;/*try to copy to register*/
	while(length > 0){
		*d++ = ch;
		length--;
	}
}
/*
 * copies one buffer to another
 * void* memcpy( void *dest, const void *src, size_t count );
 */
void str_memcpy(void* dest, const void* src, int length){
	register char* d = dest;
	register const char* s = src;
	while(length > 0){
		*d++ = *s++;
		length--;
	}
}

/*
 * moves one buffer to another, it can handle the override memory correct
 * void* memmove( void* dest, const void* src, size_t count );
 */
void str_memmove(void* dest, const void* src, int length){
	register char* d = dest;
	register const char* s = src;
	char buf[1000];/*buffer to store the data*/
	str_memcpy(buf, s, length);/*2 memcpy to implement move*/
	str_memcpy(d, buf, length);
}
