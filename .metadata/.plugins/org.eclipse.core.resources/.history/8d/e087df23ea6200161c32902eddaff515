/*
 * binary_search_tree.c
 *
 *  Created on: Aug 15, 2016
 *      Author: wenjian
 */
#include<stdlib.h>
#include<stdio.h>

struct BSTNode* bstree_search(struct BSTNode* root, int element, struct BSTNode* parent){
	if(root == null) return null;
	struct BSTNode* tmp = root;
	while(tmp != null){
		if(element == (tmp->data)) return tmp;
		else if(element < (tmp->data)){
			parent = tmp;
			tmp = tmp->lchild;
		}
		else if(element > (tmp->data)){
			parent = tmp;
			tmp = tmp->rchild;
		}
	}
	return parent;
}
struct BSTNode* create_bstree(int array[], int n){
	if(n==0) return NULL;
	struct BSTNode* root = (struct BSTNode*)malloc(sizeof(struct BSTNode));
	root->data = array[0];

	struct BSTNode* p = root;
	struct BSTNode* q;
	int i = 1;
	for(i=1; i<n; i++){
		struct BSTNode* tmp = (struct BSTNode*)malloc(sizeof(struct BSTNode));
		tmp->data = array[i];
		while(p != null){
			if(tmp->data < p->data){
				q = p;
				p = p->lchild;
			}
			else if(tmp->data > p->data){
				q = p;
				p = p->rchild;
			}
		}

	}
}
